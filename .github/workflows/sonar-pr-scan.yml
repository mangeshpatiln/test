name: SonarQube PR Scan

on:
  pull_request:
    types: [opened, reopened]

jobs:
  sonar_scan:
    runs-on: [self-hosted, NewSonarScan]

    steps:
      - name: Set up SonarQube Scanner
        run: |
          echo "/opt/sonar-scanner/bin" >> $GITHUB_PATH

      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Get PR author name
        id: pr_author
        run: |
          PR_AUTHOR=$(curl -s -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
            https://api.github.com/repos/${{ github.repository }}/pulls/${{ github.event.pull_request.number }} | \
            jq -r .user.login)
          echo "PR_AUTHOR=$PR_AUTHOR" >> $GITHUB_ENV
      - name: Update SonarQube properties file
        run: |
          echo "sonar.projectKey=${PR_AUTHOR}" > sonar-project.properties
          echo "sonar.branch.name=${{ github.head_ref }}" >> sonar-project.properties
          echo "sonar.sources=." >> sonar-project.properties
          echo "sonar.host.url=http://192.168.0.25:9000" >> sonar-project.properties
          echo "sonar.login=${{ secrets.SONAR_TOKEN }}" >> sonar-project.properties
          echo "sonar.exclusions=keys/**/*,.idea,reports/**/*,samplefiles/**/*,scripts/**/*,swagger/**/*,uploads/**/*,views/**/*,migrations/**/*,templates/**/*,ecosystem.config.js,**/*.test.js,__tests__/**/*.test.js,**/__tests__/**/*" >> sonar-project.properties

      - name: Verify and run SonarQube Scanner
        run: |
          cat sonar-project.properties
          sonar-scanner
      - name: Wait for SonarQube analysis to complete
        id: wait_for_analysis
        run: |
          TASK_ID=$(grep -oP '(?<=ceTaskId=)[^&]+' .scannerwork/report-task.txt)
          echo "SonarQube Task ID: $TASK_ID"
      
          for i in {1..30}; do
            STATUS=$(curl -s -u ${{ secrets.SONAR_USERNAME }}:${{ secrets.SONAR_PASSWORD }} \
              "http://192.168.0.25:9000/api/ce/task?id=$TASK_ID" | jq -r '.task.status')
            
            echo "Current status: $STATUS"
            
            if [ "$STATUS" == "SUCCESS" ]; then
              echo "SonarQube analysis complete."
              break
            elif [ "$STATUS" == "FAILED" ]; then
              echo "SonarQube analysis failed."
              exit 1
            else
              echo "Waiting for analysis to complete..."
              sleep 10
            fi
          done
# Modify: Check SonarQube scan result
      - name: Check SonarQube scan result
        id: scan_check
        run: |
          BRANCH_NAME="${{ github.head_ref }}"
          echo "Branch name: $BRANCH_NAME"
          ANALYSIS_DATE=$(curl -s -u ${{ secrets.SONAR_USERNAME }}:${{ secrets.SONAR_PASSWORD }} \
            "http://192.168.0.25:9000/api/components/show?component=${PR_AUTHOR}&branch=${BRANCH_NAME}" | jq -r '.component.analysisDate')
          echo "Raw analysis date (UTC format from SonarQube): $ANALYSIS_DATE"
          
          ANALYSIS_EPOCH=$(date -u -d "$ANALYSIS_DATE" +%s || echo 0)
          CURRENT_EPOCH=$(date -u +%s)
          DIFF=$((CURRENT_EPOCH - ANALYSIS_EPOCH))
          ANALYSIS_DATE_ONLY=$(date -u -d "$ANALYSIS_DATE" +%Y-%m-%d)
          TODAY_UTC=$(date -u +%Y-%m-%d)
          
          echo "Analysis UTC date: $ANALYSIS_DATE_ONLY"
          echo "Today's UTC date: $TODAY_UTC"
          echo "Time diff (sec): $DIFF"
          
          if [ "$ANALYSIS_DATE_ONLY" = "$TODAY_UTC" ] && [ "$DIFF" -lt 3600 ]; then
            echo "Recent scan found. Fetching issue counts..."
            BLOCKERCOUNT=$(curl -s -u ${{ secrets.SONAR_USERNAME }}:${{ secrets.SONAR_PASSWORD }} \
              "http://192.168.0.25:9000/api/issues/search?componentKeys=${PR_AUTHOR}&branch=${BRANCH_NAME}&resolved=false&severities=BLOCKER" | jq '.total // 0')
            BUGCOUNT=$(curl -s -u ${{ secrets.SONAR_USERNAME }}:${{ secrets.SONAR_PASSWORD }} \
              "http://192.168.0.25:9000/api/issues/search?componentKeys=${PR_AUTHOR}&branch=${BRANCH_NAME}&resolved=false&types=BUG" | jq '.total // 0')
            VULNCOUNT=$(curl -s -u ${{ secrets.SONAR_USERNAME }}:${{ secrets.SONAR_PASSWORD }} \
              "http://192.168.0.25:9000/api/issues/search?componentKeys=${PR_AUTHOR}&branch=${BRANCH_NAME}&resolved=false&types=VULNERABILITY" | jq '.total // 0')
            HOTSPOTCOUNT=$(curl -s -u ${{ secrets.SONAR_USERNAME }}:${{ secrets.SONAR_PASSWORD }} \
              "http://192.168.0.25:9000/api/hotspots/search?projectKey=${PR_AUTHOR}&branch=${BRANCH_NAME}" | jq '.total // 0')
            
            echo "BLOCKERCOUNT=$BLOCKERCOUNT" >> $GITHUB_ENV
            echo "BUGCOUNT=$BUGCOUNT" >> $GITHUB_ENV
            echo "VULNERABILITYCOUNT=$VULNCOUNT" >> $GITHUB_ENV
            echo "SECURITYHOTSPOTCOUNT=$HOTSPOTCOUNT" >> $GITHUB_ENV
      
            if [ "$BLOCKERCOUNT" -eq 0 ] && [ "$BUGCOUNT" -eq 0 ] && [ "$VULNCOUNT" -eq 0 ] && [ "$HOTSPOTCOUNT" -eq 0 ]; then
              echo "BuildResult=pass" >> $GITHUB_ENV
            else
              echo "BuildResult=fail" >> $GITHUB_ENV
            fi
          else
            echo "Sonar scan not recent or not today."
            echo "BuildResult=fail" >> $GITHUB_ENV
          fi
          - name: Mark PR status based on SonarQube result
          if: always()
          env:
            GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
            BLOCKERCOUNT: ${{ env.BLOCKERCOUNT }}
            BUGCOUNT: ${{ env.BUGCOUNT }}
            VULNERABILITYCOUNT: ${{ env.VULNERABILITYCOUNT }}
            SECURITYHOTSPOTCOUNT: ${{ env.SECURITYHOTSPOTCOUNT }}
            BuildResult: ${{ env.BuildResult }}
            PR_NUMBER: ${{ github.event.pull_request.number }}
          run: |
            gh --version
        
            if [ "$BuildResult" = "pass" ]; then
              COMMENT_BODY=":white_check_mark: **SonarQube Scan Passed**
        
        The scan reported the following issues:
        
        - **Blockers**: $BLOCKERCOUNT
        - **Bugs**: $BUGCOUNT
        - **Vulnerabilities**: $VULNERABILITYCOUNT
        - **Security Hotspots**: $SECURITYHOTSPOTCOUNT
        "
            else
              COMMENT_BODY=":x: **SonarQube Scan Failed**
        
        The scan reported the following issues:
        
        - **Blockers**: $BLOCKERCOUNT
        - **Bugs**: $BUGCOUNT
        - **Vulnerabilities**: $VULNERABILITYCOUNT
        - **Security Hotspots**: $SECURITYHOTSPOTCOUNT
        
        Please resolve these issues before requesting another review.
        "
            fi
        
            EXISTING_COMMENT_ID=$(gh pr view $PR_NUMBER --comments --json comments \
              | jq '.comments[] | select(.author.login == "github-actions[bot]") | select(.body | contains("SonarQube Scan")) | .id' \
              | tail -n1)
        
            if [ -n "$EXISTING_COMMENT_ID" ]; then
              gh pr comment $PR_NUMBER --edit "$EXISTING_COMMENT_ID" --body "$COMMENT_BODY"
            else
              gh pr comment $PR_NUMBER --body "$COMMENT_BODY"
            fi
    - name: Fail workflow if scan failed
        if: env.BuildResult == 'fail'
        run: exit 1

