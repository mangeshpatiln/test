name: SonarQube PR Scan

on:
  pull_request:
    types: [opened, synchronize, reopened]  # Trigger on PR open, update, or reopen

jobs:
  sonar_scan:
    runs-on: self-hosted  # Runs on a self-hosted runner

    steps:
      - name: Set up SonarQube Scanner
        run: |
          # Add the sonar-scanner directory to the PATH
          echo "/opt/sonar-scanner/bin" >> $GITHUB_PATH

      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Get PR author name
        id: pr_author
        run: |
          PR_AUTHOR=$(curl -s -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
              https://api.github.com/repos/${{ github.repository }}/pulls/${{ github.event.pull_request.number }} | \
              jq -r .user.login)
          echo "PR_AUTHOR=${PR_AUTHOR}" >> $GITHUB_ENV

      - name: Update SonarQube properties file
        run: |
          echo "sonar.projectKey=${PR_AUTHOR}" >> sonar-project.properties
          echo "sonar.branch.name=${{ github.head_ref }}" >> sonar-project.properties
          echo "sonar.sources=." >> sonar-project.properties
          echo "sonar.host.url=http://192.168.0.25:9000" >> sonar-project.properties
          echo "sonar.login=${{ secrets.SONAR_TOKEN }}" >> sonar-project.properties

      - name: Verify sonar-project.properties
        run: |
          cat sonar-project.properties
          sonar-scanner

      - name: Wait for SonarQube scan result (1 minute)
        run: |
          sleep 60

      - name: Check SonarQube scan result
        run: |
          # Extract the branch name (assume it's the same as PR branch)
          BRANCH_NAME=${{ github.head_ref }}
          echo "Branch name: $BRANCH_NAME"
      
          # SonarQube analysis date and time extraction logic
          date1=$(curl -s -u ${{ secrets.SONAR_USERNAME }}:${{ secrets.SONAR_PASSWORD }} 'http://192.168.0.25:9000/api/components/show?component='${PR_AUTHOR}'&branch='${BRANCH_NAME}'' | jq -r '.component.analysisDate' | awk -F'T' '{print $1}')
          echo "Analysis date: $date1"
      
          time1=$(curl -s -u ${{ secrets.SONAR_USERNAME }}:${{ secrets.SONAR_PASSWORD }} 'http://192.168.0.25:9000/api/components/show?component='${PR_AUTHOR}'&branch='${BRANCH_NAME}'' | jq -r '.component.analysisDate' | awk -F'T' '{print $2}' | awk -F'+' '{print $1}')
          echo "Analysis time: $time1"
      
          # Convert to timestamps
          t1=$(date -d "${time1}" +%s || echo 0)
          CURRENTTIME1=$(date +%H:%M:%S)
          t2=$(date -d "${CURRENTTIME1}" +%s)
          DIFF1=$(expr $t2 - $t1)
          currentdate1=$(date +%Y-%m-%d)
      
          if [ "$date1" = "$currentdate1" ]; then
            if [ "$DIFF1" -lt '12000' ]; then
              # Check for blocker, bug, vulnerability, and security hotspot counts
              BLOCKERCOUNT1=$(curl -s -u ${{ secrets.SONAR_USERNAME }}:${{ secrets.SONAR_PASSWORD }} 'http://192.168.0.25:9000/api/issues/search?componentKeys='${PR_AUTHOR}'&branch='${BRANCH_NAME}'&resolved=false&severities=BLOCKER' | jq '.total' || echo 0)
              BUGCOUNT1=$(curl -s -u ${{ secrets.SONAR_USERNAME }}:${{ secrets.SONAR_PASSWORD }} 'http://192.168.0.25:9000/api/issues/search?componentKeys='${PR_AUTHOR}'&branch='${BRANCH_NAME}'&resolved=false&types=BUG' | jq '.total' || echo 0)
              VULNERABILITY1=$(curl -s -u ${{ secrets.SONAR_USERNAME }}:${{ secrets.SONAR_PASSWORD }} 'http://192.168.0.25:9000/api/issues/search?componentKeys='${PR_AUTHOR}'&branch='${BRANCH_NAME}'&resolved=false&types=VULNERABILITY' | jq '.total' || echo 0)
              SECURITYHOTSPOT1=$(curl -s -u ${{ secrets.SONAR_USERNAME }}:${{ secrets.SONAR_PASSWORD }} 'http://192.168.0.25:9000/api/hotspots/search?projectKey='${PR_AUTHOR}'&branch='${BRANCH_NAME}'' | jq '.total' || echo 0)
      
              echo "BLOCKERCOUNT1=$BLOCKERCOUNT1"
              echo "BUGCOUNT1=$BUGCOUNT1"
              echo "VULNERABILITY1=$VULNERABILITY1"
              echo "SECURITYHOTSPOT1=$SECURITYHOTSPOT1"
      
              if [ "$BLOCKERCOUNT1" -eq 0 ] && [ "$BUGCOUNT1" -eq 0 ] && [ "$VULNERABILITY1" -eq 0 ] && [ "$SECURITYHOTSPOT1" -eq 0 ]; then
                echo "No Sonar issues"
                echo "Build=true" >> $GITHUB_ENV
              else
                echo "Sonar scan failed"
                echo "BLOCKERCOUNT=$BLOCKERCOUNT1, BUGCOUNT=$BUGCOUNT1, VULNERABILITY=$VULNERABILITY1, SECURITYHOTSPOT=$SECURITYHOTSPOT1"
                exit 1
              fi
            else
              echo "Last Build is not ran within 10 minutes"
              exit 1
            fi
          else
            echo "Last Build is not ran today."
            exit 1
          fi


      - name: Mark PR status based on Sonar result
        run: |          # Ensure GitHub CLI is authenticated
          echo "GITHUB_TOKEN=${{ secrets.GITHUB_TOKEN }}" >> $GITHUB_ENV

          # Make sure gh is installed
          gh --version

          if [[ "${{ env.Build }}" == "true" ]]; then
            echo "Sonar scan passed. Marking PR as passed."
            gh pr review ${{ github.event.pull_request.number }} --approve
          else
            echo "Sonar scan failed. Marking PR as rejected."
            gh pr review ${{ github.event.pull_request.number }} --request-changes --body "Sonar scan failed due to blockers, bugs, vulnerabilities, or security hotspots."

            # Add custom comment with failure details to PR
            gh pr comment ${{ github.event.pull_request.number }} --body "### SonarQube Scan Failed
            The SonarQube scan failed due to the following issues:
            - **Blockers**: $BLOCKERCOUNT1
            - **Bugs**: $BUGCOUNT1
            - **Vulnerabilities**: $VULNERABILITY1
            - **Security Hotspots**: $SECURITYHOTSPOT1

            Please fix the issues before requesting a re-review."
          fi
